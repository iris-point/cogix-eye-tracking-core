name: Publish to NPM

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    
    # Remove repository restriction to allow running on any repo
    # Uncomment the line below if you want to restrict to a specific repo
    # if: github.repository == 'YOUR_GITHUB_USERNAME/YOUR_REPO_NAME'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Check for changes
        id: changes
        run: |
          # For first commit or manual trigger, always proceed
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif ! git rev-parse HEAD~1 >/dev/null 2>&1; then
            # First commit in repository
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif git diff HEAD~1 --name-only | grep -E "^(src/|package.json|README.md|examples/)" > /dev/null 2>&1; then
            # Check if there are any changes in src/, examples/, or important files
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No relevant changes detected, skipping publish"
          fi

      - name: Determine version bump
        id: version
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # If triggered manually, use the input
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "bump=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect based on commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
            
            if echo "$COMMIT_MSG" | grep -E "^(feat|feature):" > /dev/null; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMIT_MSG" | grep -E "^(breaking|major):" > /dev/null; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif echo "$COMMIT_MSG" | grep -E "^(fix|docs|style|refactor|perf|test|chore):" > /dev/null; then
              echo "bump=patch" >> $GITHUB_OUTPUT
            else
              # Default to patch for any other commits
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        if: steps.changes.outputs.has_changes == 'true'
        id: bump
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version
          npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        if: steps.changes.outputs.has_changes == 'true'
        run: npm run build

      - name: Publish to NPM
        if: steps.changes.outputs.has_changes == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag and commit
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: release v${{ steps.bump.outputs.new_version }} [skip ci]"
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
          git push origin main --follow-tags

      - name: Create GitHub Release
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          release_name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            ## 🚀 Release v${{ steps.bump.outputs.new_version }}
            
            ### 📦 NPM Package
            - Package: [@iris-point/eye-tracking-core](https://www.npmjs.com/package/@iris-point/eye-tracking-core)
            - Version: ${{ steps.bump.outputs.new_version }}
            
            ### 🌐 CDN Links
            - unpkg: https://unpkg.com/@iris-point/eye-tracking-core@${{ steps.bump.outputs.new_version }}/dist/cogix-eye-tracking-core.min.js
            - jsDelivr: https://cdn.jsdelivr.net/npm/@iris-point/eye-tracking-core@${{ steps.bump.outputs.new_version }}/dist/cogix-eye-tracking-core.min.js
            
            ### 📝 Changelog
            Auto-generated from commit messages.
          draft: false
          prerelease: false

      - name: Comment on PR (if applicable)
        if: steps.changes.outputs.has_changes == 'true' && github.event.pull_request
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `📦 Published version ${{ steps.bump.outputs.new_version }} to NPM!\n\n🌐 CDN: https://unpkg.com/@iris-point/eye-tracking-core@${{ steps.bump.outputs.new_version }}/`
            })